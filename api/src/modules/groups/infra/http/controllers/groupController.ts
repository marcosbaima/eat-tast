import { Router, Request, Response } from 'express';
import { getRepository, getCustomRepository } from 'typeorm';
import group from '@modules/groups/infra/typeorm/models/Group';
import CreateGroupService from '@modules/groups/service/CreateGroupService';
import ensureAuthenticaated from '@modules/users/infra/http/middlewares/ensureAuthenticate';
//import GroupRepository from '@modules/groups/Repositories/groups'
import {container} from 'tsyringe';
import UpdateGroupService from '@modules/groups/service/UpdateGroupService';

//groupRouter.use(ensureAuthenticaated);
//createConnection().then((connection) => {
//  const groupRepository = connection.getRepository(Group);

  // Create group
  export default class groupController {
    public async create(request:Request, response:Response):Promise<Response> {
    try {
      const {
        type,
        description,
        cm1,
        cm1u,
        cm1r1,
        cm1r2,
        cm1e,
        cm2,
        cm2c,
        cm2r,
        cm2u,
        cm2d,
        cm3,
        cm3a1,
        cm3a2,
        cm3a3,
        cm2e,
        cm4,
        cm4a1,
        cm4a2,
        cm4a3,
        cm5,
        cm5a1,
        cm5a1c,
        cm5a1e,
        cm5a1r,
        cm5a1u,
        cm5a1d,
        cm5a2,
        cm5a2c,
        cm5a2e,
        cm5a2r,
        cm5a2u,
        cm5a2d,
        cm5a3,
        cm6,
        cm6a1,
        cm6a1u,
        cm6a2,
        cm6a2c,
        cm6a2u,
        cm6a3,
        cm6a3u1,
        cm6a3u2,
        cm6a4,
        cm6a4c1,
        cm6a4c2,
        cm6a4c3,
        cm6a5,
        cm6a5u1,
        cm6a5u2,
        cm7,
        cm7a1,
        cm7a2,
        cm8,
        cm8a1,
        cm8a2,
        am1,
      am1r1,
      am1r2,
      am1r3,
      am1r4,
      am1r5,
      am1c1,
       am1e,
        am2,
      am2a1,
     am2a1c,
    am2a1te,
      AM2A2,
     AM2A2C,
     AM2A2U,
     AM2A2D,
      AM2A3,
     AM2A3U,
        AM3,
      AM3A1,
     AM3A1C,
     AM3A1R,
     AM3A1E,
      AM3A2,
     AM3A2R,
     AM3A2E,
        AM4,
      AM4A1,
     AM4A1C,
     AM4A1E,
     AM4A1R,
      AM4A2,
     AM4A2C,
     AM4A2U,
     AM4A2R,
     AM4A2E,
      AM5,

      AM6,
      AM6U1,
      AM6U2,
      AM6U3,
      AM6U4,

      } = request.body;

      const CreateGroup = container.resolve(CreateGroupService);

      const group = await CreateGroup.execute({
        type,
        description,
        cm1,
        cm1u,
        cm1r1,
        cm1r2,
        cm1e,
        cm2,
        cm2c,
        cm2r,
        cm2u,
        cm2d,
        cm3,
        cm3a1,
        cm3a2,
        cm3a3,
        cm4,
        cm4a1,
        cm4a2,
        cm4a3,
        cm5,
        cm5a1,
        cm5a1c,
        cm5a1e,
        cm5a1r,
        cm5a1u,
        cm2e,
        cm5a1d,
        cm5a2,
        cm5a2c,
        cm5a2e,
        cm5a2r,
        cm5a2u,
        cm5a2d,
        cm5a3,
        cm6,
        cm6a1,
        cm6a1u,
        cm6a2,
        cm6a2c,
        cm6a2u,
        cm6a3,
        cm6a3u1,
        cm6a3u2,
        cm6a4,
        cm6a4c1,
        cm6a4c2,
        cm6a4c3,
        cm6a5,
        cm6a5u1,
        cm6a5u2,
        cm7,
        cm7a1,
        cm7a2,
        cm8,
        cm8a1,
        cm8a2,
        am1,
        am1r1,
        am1r2,
        am1r3,
        am1r4,
        am1r5,
        am1c1,
         am1e,
          am2,
        am2a1,
       am2a1c,
      am2a1te,
        AM2A2,
       AM2A2C,
       AM2A2U,
       AM2A2D,
        AM2A3,
       AM2A3U,
          AM3,
        AM3A1,
       AM3A1C,
       AM3A1R,
       AM3A1E,
        AM3A2,
       AM3A2R,
       AM3A2E,
          AM4,
        AM4A1,
       AM4A1C,
       AM4A1E,
       AM4A1R,
        AM4A2,
       AM4A2C,
       AM4A2U,
       AM4A2R,
       AM4A2E,
        AM5,

        AM6,
        AM6U1,
        AM6U2,
        AM6U3,
        AM6U4,
      });

      return response.json(group);
    } catch (err) {
      return response.status(400).json({ error: err.message });
    }
  }

  public async show(req: Request,response:Response):Promise<any> {
    response.json(await getRepository(group).find());
  }
  public async update(request:Request, response:Response):Promise<Response> {
    try {
        const {  type,
            description,
            cm1,
            cm1u,
            cm1r1,
            cm1r2,
            cm1e,
            cm2,
            cm2c,
            cm2r,
            cm2u,
            cm2d,
            cm3,
            cm3a1,
            cm3a2,
            cm3a3,
            cm4,
            cm4a1,
            cm4a2,
            cm4a3,
            cm5,
            cm5a1,
            cm5a1c,
            cm5a1e,
            cm5a1r,
            cm5a1u,
            cm2e,
            cm5a1d,
            cm5a2,
            cm5a2c,
            cm5a2e,
            cm5a2r,
            cm5a2u,
            cm5a2d,
            cm5a3,
            cm6,
            cm6a1,
            cm6a1u,
            cm6a2,
            cm6a2c,
            cm6a2u,
            cm6a3,
            cm6a3u1,
            cm6a3u2,
            cm6a4,
            cm6a4c1,
            cm6a4c2,
            cm6a4c3,
            cm6a5,
            cm6a5u1,
            cm6a5u2,
            cm7,
            cm7a1,
            cm7a2,
            cm8,
            cm8a1,
            cm8a2,
            am1,
            am1r1,
            am1r2,
            am1r3,
            am1r4,
            am1r5,
            am1c1,
             am1e,
              am2,
            am2a1,
           am2a1c,
          am2a1te,
            AM2A2,
           AM2A2C,
           AM2A2U,
           AM2A2D,
            AM2A3,
           AM2A3U,
              AM3,
            AM3A1,
           AM3A1C,
           AM3A1R,
           AM3A1E,
            AM3A2,
           AM3A2R,
           AM3A2E,
              AM4,
            AM4A1,
           AM4A1C,
           AM4A1E,
           AM4A1R,
            AM4A2,
           AM4A2C,
           AM4A2U,
           AM4A2R,
           AM4A2E,
            AM5,

            AM6,
            AM6U1,
            AM6U2,
            AM6U3,
            AM6U4, } = request.body;

            const CreateGroup = container.resolve(UpdateGroupService);

            const group = await CreateGroup.execute({
              type,
              description,
              cm1,
              cm1u,
              cm1r1,
              cm1r2,
              cm1e,
              cm2,
              cm2c,
              cm2r,
              cm2u,
              cm2d,
              cm3,
              cm3a1,
              cm3a2,
              cm3a3,
              cm4,
              cm4a1,
              cm4a2,
              cm4a3,
              cm5,
              cm5a1,
              cm5a1c,
              cm5a1e,
              cm5a1r,
              cm5a1u,
              cm2e,
              cm5a1d,
              cm5a2,
              cm5a2c,
              cm5a2e,
              cm5a2r,
              cm5a2u,
              cm5a2d,
              cm5a3,
              cm6,
              cm6a1,
              cm6a1u,
              cm6a2,
              cm6a2c,
              cm6a2u,
              cm6a3,
              cm6a3u1,
              cm6a3u2,
              cm6a4,
              cm6a4c1,
              cm6a4c2,
              cm6a4c3,
              cm6a5,
              cm6a5u1,
              cm6a5u2,
              cm7,
              cm7a1,
              cm7a2,
              cm8,
              cm8a1,
              cm8a2,
              am1,
              am1r1,
              am1r2,
              am1r3,
              am1r4,
              am1r5,
              am1c1,
               am1e,
                am2,
              am2a1,
             am2a1c,
            am2a1te,
              AM2A2,
             AM2A2C,
             AM2A2U,
             AM2A2D,
              AM2A3,
             AM2A3U,
                AM3,
              AM3A1,
             AM3A1C,
             AM3A1R,
             AM3A1E,
              AM3A2,
             AM3A2R,
             AM3A2E,
                AM4,
              AM4A1,
             AM4A1C,
             AM4A1E,
             AM4A1R,
              AM4A2,
             AM4A2C,
             AM4A2U,
             AM4A2R,
             AM4A2E,
              AM5,

              AM6,
              AM6U1,
              AM6U2,
              AM6U3,
              AM6U4,
            });

            return response.json(group);
          } catch (err) {
            return response.status(400).json({ error: err.message });
          }
        }

}

